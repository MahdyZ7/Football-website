// Add this inside your handleSubmit function in the `pages/index.tsx` file, right before each alert call

const showAlertWithGif = (message: string, gifUrl: string) => {
  const alertWrapper = document.createElement('div');
  const alertMessage = document.createElement('p');
  const alertGif = document.createElement('img');

  alertMessage.textContent = message;
  alertGif.src = gifUrl;
  alertGif.style.width = '100px'; // Set the size of the gif as you like
  alertGif.style.height = '100px'; // Set the size of the gif as you like
  alertGif.alt = 'alert gif';

  alertWrapper.appendChild(alertMessage);
  alertWrapper.appendChild(alertGif);

  alertWrapper.style.position = 'fixed';
  alertWrapper.style.left = '0';
  alertWrapper.style.top = '0';
  alertWrapper.style.width = '100%';
  alertWrapper.style.height = '100%';
  alertWrapper.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  alertWrapper.style.display = 'flex';
  alertWrapper.style.flexDirection = 'column';
  alertWrapper.style.justifyContent = 'center';
  alertWrapper.style.alignItems = 'center';
  alertWrapper.style.zIndex = '1000';

  document.body.appendChild(alertWrapper);

  // Dismiss the alert with a click
  alertWrapper.onclick = function () {
	document.body.removeChild(alertWrapper);
  };
};

// Replace each `alert('Your message');` call with the following:
const gifUrl = 'path_to_your_gif.gif'; // Replace with your gif URL
showAlertWithGif('Your message', gifUrl);


// ---------------------------------------------------------------------

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
	const { name, id } = req.body as User;

	// Retrieve the current list of users
	const users = getUsers();

	// Check for a user with the same ID
	const idExists = users.some(user => user.id === id);

	if (idExists) {
	  // ID already in use, send a conflict response
	  res.status(409).json({ message: `A user with the ID ${id} already exists.` });
	  return;
	}

	// ID is unique, add new user to the list
	users.push({ name, id });
	fs.writeFileSync(dataFilePath, JSON.stringify(users), 'utf8');
	res.status(200).json({ name, id });
  } else if (req.method === 'DELETE') {
	const secretHeader = req.headers['x-secret-header'];
	const mySecret = process.env['resetuser']
	if (!secretHeader || secretHeader !== mySecret) {
	  res.status(401).json({ message: 'Unauthorized' });
	  return;
	}
	try {
	  resetUsers();
	  res.status(200).json({ message: 'User list has been reset.' });
	} catch (error) {
	  res.status(500).json({ message: 'Internal Server Error' });
	}
  } else {
	// Method not allowed
	res.status(405).end();
  }
}
